<?php

namespace AcmeGroup\LaboBundle\Entity;

use AcmeGroup\LaboBundle\Entity\baseLaboRepository;
use Doctrine\ORM\QueryBuilder;
use \Exception;
use \DateTime;

/**
 * statutRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class statutRepository extends baseLaboRepository {

	const STATUT_NOM_ACTIF		= "Actif";
	const STATUT_NOM_INACTIF 	= "Inactif";

	/**
	 * Renvoie la(les) valeur(s) par défaut
	 * $onlyOneObject : si true, renvoie un seul objet en résultat, ou null - false, renvoie un tableau (vide si aucun)
	 * @param mixed $defaults - valeur(s) par défaut du $champ
	 * @param boolean $onlyOneObject
	 * @return mixed
	 */
	public function defaultVal($defaults = null, $onlyOneObject = false, $champ = 'nom') {
		// valeurs spécifiques
		if($defaults === null) $defaults = array(self::STATUT_NOM_ACTIF);
		// $champ = 'slug';
		return parent::defaultVal($defaults, $onlyOneObject, $champ);
	}


	/**
	 * Renvoie la(les) valeur(s) selon le(s) ROLE(S) --> ATTENTION : retourne un queryBuilder
	 * @param mixed $roles - ROLES à prendre en compte
	 * @param string $champ - 'nom' par défaut
	 * @return queryBuilder
	 */
	public function defaultRoleClosure($roles = null, $champ = 'nom') {
		// valeurs spécifiques
		// $champ = 'slug';
		return parent::defaultRoleClosure($roles, $champ);
	}


	/**
	 * Renvoie le statut inactif
	 */
	public function getActif() {
		$qb = $this->createQueryBuilder(self::ELEMENT);
		$qb->where(self::ELEMENT.'nom = :statnom')
			->setParameter('statnom', self::STATUT_NOM_ACTIF)
			->setMaxResults(1);
		return $qb->getQuery()->getOneOrNullResult();
	}

	/**
	 * Renvoie le statut inactif
	 */
	public function getInactif() {
		$qb = $this->createQueryBuilder(self::ELEMENT);
		$qb->where(self::ELEMENT.'.nom = :statnom')
			->setParameter('statnom', self::STATUT_NOM_INACTIF)
			->setMaxResults(1);
		return $qb->getQuery()->getOneOrNullResult();
	}



}
