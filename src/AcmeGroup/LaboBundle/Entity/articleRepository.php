<?php

namespace AcmeGroup\LaboBundle\Entity;

use AcmeGroup\LaboBundle\Entity\baseLaboRepository;
use Doctrine\ORM\QueryBuilder;
use \Exception;
use \DateTime;

/**
 * articleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class articleRepository extends baseLaboRepository {

	/**
	 * Renvoie la(les) valeur(s) par défaut
	 * $onlyOneObject : si true, renvoie un seul objet en résultat, ou null - false, renvoie un tableau (vide si aucun)
	 * @param mixed $defaults - valeur(s) par défaut du $champ
	 * @param boolean $onlyOneObject
	 * @return mixed
	 */
	public function defaultVal($defaults = null, $onlyOneObject = false, $champ = 'nom') {
		// !!! Ne doit rien renvoyer, c'est juste une liste d'articles !!!
		return array();
	}

	/**
	 * Renvoie la(les) valeur(s) selon le(s) ROLE(S) --> ATTENTION : retourne un queryBuilder
	 * @param mixed $roles
	 * @param string $champ - 'nom' par défaut
	 * @return queryBuilder
	 */
	public function defaultRoleClosure($roles = null, $champ = 'nom') {
		// !!! Ne doit rien renvoyer, c'est juste une liste d'articles !!!
		return array();
	}

	public function findAllArticlesVer($nb = null) {
		$qb = $this->createQueryBuilder(self::ELEMENT);
		$leftJoins = array(
			'imagePpale' 	=> array(),
			'unite'			=> array(),
			'cuissons'		=> array('image'	=> array()),
			'images'		=> array(),
			'tags'			=> array(),
		);
		$qb = $this->addJoins($qb, $leftJoins);
		$qb = $this->withVersion($qb);
		// if(is_int($nb)) $qb->setMaxResults($nb);
		$qb->orderBy(self::ELEMENT.'.prix', 'ASC');
		return $qb->getQuery()->getArrayResult();
	}

	/**
	* findXArticles
	* Renvoie X ($nb) articles
	* @param int $nb
	* @return array
	*/
	public function findXArticles($nb) {
		$qb = $this->createQueryBuilder(self::ELEMENT);
		$qb = $this->genericFilter($qb);
		$qb = $this->addImages($qb);
		$qb->setMaxResults($nb) // limite le nombre de résultats
			->orderBy(self::ELEMENT.'.plusVisible', 'DESC') // Sélectionne en premier les articles "plus visibles"
			->addOrderBy(self::ELEMENT.'.notation', 'DESC'); // Puis par notation
		return $qb->getQuery()->getResult();
	}

	/**
	* findArtByCategorie
	* Liste des produits d'une catégorie
	* @param string $slug
	* @return array
	*/
	public function findArtByCategorie($params) {
		if(is_string($params)) $slug = array($params);
			else $slug = $params;
		// var_dump($slug);
		//
		$qb = $this->createQueryBuilder(self::ELEMENT);
		$qb->join(self::ELEMENT.'.categories', 'c')
			->where($qb->expr()->in('c.slug', $slug));
		$qb = $this->genericFilter($qb);
		$qb = $this->addImages($qb);
		// $qb->groupBy('r'); // regrouper par réseaux
		$qb->orderBy('r.id', 'ASC')
			->addOrderBy(self::ELEMENT.'.prix', 'ASC');
		return $qb->getQuery()->getResult();
	}

	/**
	 * Ajoute les images de l'article à la requête
	 * @param QueryBuilder
	 * 
	 */
	public function addImages($qb) {
		$qb->leftJoin(self::ELEMENT.'.imagePpale', 'ip')
			->addSelect('ip')
			->leftJoin(self::ELEMENT.'.images', 'ii')
			->addSelect('ii');
		return $qb;
	}

}